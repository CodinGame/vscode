/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

declare let MonacoEnvironment: monaco.Environment | undefined;

interface Window {
	MonacoEnvironment?: monaco.Environment | undefined;
}

declare namespace monaco {

	export type Thenable<T> = PromiseLike<T>;

	export interface Environment {
		globalAPI?: boolean;
		baseUrl?: string;
		getWorker?(workerId: string, label: string): Promise<Worker> | Worker;
		getWorkerUrl?(workerId: string, label: string): string;
	}

	export interface IEvent<T> {
		(listener: (e: T) => any, thisArg?: any): IDisposable;
	}

	/**
	 * A helper that allows to emit and listen to typed events
	 */
	export class Emitter<T> {
		constructor();
		readonly event: Event<T>;
		fire(event: T): void;
		dispose(): void;
	}

#include(vs/base/common/lifecycle): IDisposable, Disposable, DisposableStore
#include(vs/platform/markers/common/markers): MarkerTag, MarkerSeverity
#include(vs/base/common/cancellation): CancellationTokenSource, CancellationToken
#include(vs/base/common/uri): URI, UriComponents
#include(vs/base/common/keyCodes): KeyCode
#include(vs/editor/common/services/editorBaseApi): KeyMod
#include(vs/base/common/htmlContent): IMarkdownString, MarkdownString, MarkdownStringTextNewlineStyle
#include(vs/base/browser/keyboardEvent): IKeyboardEvent
#include(vs/base/browser/mouseEvent): IMouseEvent, IMouseWheelEvent
#include(vs/editor/common/editorCommon): IScrollEvent
#include(vs/editor/common/core/position): IPosition, Position
#include(vs/editor/common/core/range): IRange, Range
#include(vs/editor/common/core/selection): ISelection, Selection, SelectionDirection
#include(vs/editor/common/languages;IState=>languages.IState): Token, TokenizationResult, EncodedTokenizationResult

#includeAll(vs/platform/log/common/log):
#include(vs/base/common/errors): ErrorHandler, errorHandler, ErrorListenerCallback, ErrorListenerUnbind
}

declare namespace monaco.editor {
#include(vs/editor/browser/widget/diffNavigator): IDiffNavigator
#includeAll(vs/editor/standalone/browser/standaloneEditor;languages.Token=>Token):
#includeAll(vs/editor/standalone/common/standaloneTheme;ServiceIdentifier=>extra.ServiceIdentifier):
#include(vs/editor/standalone/browser/standaloneThemeService): StandaloneThemeService, StandaloneTheme
#include(vs/editor/common/languages/supports/tokenization): ITokenThemeRule
#include(vs/editor/browser/services/webWorker): MonacoWebWorker, IWebWorkerOptions
#include(vs/editor/browser/widget/codeEditorWidget;editorCommon.=>;editorBrowser.=>;IContextKeyService=>extra.IContextKeyService;IModelService=>extra.IModelService;ICodeEditorService=>extra.ICodeEditorService;ICommandHandler=>extra.ICommandHandler;IContextKey=>extra.IContextKey;IInstantiationService=>extra.IInstantiationService;ServicesAccessor=>extra.ServicesAccessor): CodeEditorWidget
#include(vs/editor/browser/widget/diffEditorWidget;editorCommon.=>;editorBrowser.=>;IContextKeyService=>extra.IContextKeyService;IModelService=>extra.IModelService;ICodeEditorService=>extra.ICodeEditorService;ICommandHandler=>extra.ICommandHandler;IContextKey=>extra.IContextKey): DiffEditorWidget
#include(vs/editor/standalone/browser/standaloneCodeEditor;IContextKeyService=>extra.IContextKeyService;IModelService=>extra.IModelService;ICodeEditorService=>extra.ICodeEditorService;ICommandHandler=>extra.ICommandHandler;IContextKey=>extra.IContextKey;StandaloneKeybindingService=>extra.StandaloneKeybindingService;IInstantiationService=>extra.IInstantiationService): IActionDescriptor, IGlobalEditorOptions, IStandaloneEditorConstructionOptions, IStandaloneDiffEditorConstructionOptions, IStandaloneCodeEditor, IStandaloneDiffEditor, StandaloneCodeEditor, StandaloneDiffEditor
#include(vs/editor/standalone/browser/standaloneServices): IEditorOverrideServices
#include(vs/platform/markers/common/markers): IMarker, IMarkerData, IRelatedInformation
#include(vs/editor/standalone/browser/colorizer): IColorizerOptions, IColorizerElementOptions
#include(vs/base/common/scrollable): ScrollbarVisibility
#include(vs/platform/theme/common/theme): ColorScheme
#includeAll(vs/base/common/color):
#include(vs/platform/theme/common/colorRegistry): ColorIdentifier
#includeAll(vs/platform/theme/common/themeService):
#include(vs/editor/common/core/editOperation): ISingleEditOperation
#include(vs/editor/common/core/wordHelper): IWordAtPosition
#includeAll(vs/editor/common/model): IScrollEvent
#include(vs/editor/common/diff/diffComputer): IChange, ICharChange, ILineChange
#include(vs/editor/common/core/dimension): IDimension
#includeAll(vs/editor/common/editorCommon): IScrollEvent
#includeAll(vs/editor/common/textModelEvents):
#includeAll(vs/editor/common/cursorEvents):
#include(vs/platform/accessibility/common/accessibility): AccessibilitySupport
#includeAll(vs/editor/common/config/editorOptions):
#include(vs/editor/browser/config/editorConfiguration): IEditorConstructionOptions
#includeAll(vs/editor/browser/editorBrowser;editorCommon.=>):
#include(vs/editor/common/config/fontInfo): FontInfo, BareFontInfo

//compatibility:
export type IReadOnlyModel = ITextModel;
export type IModel = ITextModel;
}

declare namespace monaco.languages {

#include(vs/base/common/glob): IRelativePattern
#include(vs/editor/common/languageSelector): LanguageSelector, LanguageFilter
#includeAll(vs/editor/standalone/browser/standaloneLanguages;languages.=>;editorCommon.=>editor.;model.=>editor.;IMarkerData=>editor.IMarkerData):
#includeAll(vs/editor/common/languages/languageConfiguration):
#includeAll(vs/editor/common/languages;IMarkerData=>editor.IMarkerData;ISingleEditOperation=>editor.ISingleEditOperation;model.=>editor.): Token
#includeAll(vs/editor/common/languages/language;ServiceIdentifier=>extra.ServiceIdentifier):
#includeAll(vs/editor/standalone/common/monarch/monarchTypes):

#includeAll(vs/editor/common/services/languageService):

#includeAll(vs/editor/common/languages/languageConfigurationRegistry;ServiceIdentifier=>extra.ServiceIdentifier;IConfigurationService=>extra.IConfigurationService;EditorAutoIndentStrategy=>editor.EditorAutoIndentStrategy):
#include(vs/editor/common/languages/supports/characterPair): CharacterPairSupport
#include(vs/editor/common/languages/supports/indentRules): IndentRulesSupport
#include(vs/editor/common/languages/supports/richEditBrackets): RichEditBrackets, RichEditBracket
#include(vs/editor/common/languages/supports/electricCharacter): BracketElectricCharacterSupport, IElectricAction
#include(vs/editor/common/languages/supports): ScopedLineTokens
#include(vs/editor/common/tokens/lineTokens): LineTokens, IViewLineTokens
}

declare namespace monaco.worker {

#include(vs/editor/common/model/mirrorTextModel): IMirrorTextModel
#includeAll(vs/editor/common/services/editorSimpleWorker):

}

declare namespace monaco.extra {
#includeAll(vs/platform/instantiation/common/descriptors):
#includeAll(vs/platform/instantiation/common/instantiation;descriptors.=>):
#includeAll(vs/platform/instantiation/common/serviceCollection):
#include(vs/editor/standalone/browser/standaloneServices;IEditorOverrideServices=>editor.IEditorOverrideServices): StandaloneServices

#include(vs/base/common/functional): once
#include(vs/base/common/lifecycle): IReference, ReferenceCollection, AsyncReferenceCollection, toDisposable
#include(vs/base/common/keybindings): Modifiers, IBaseKeybinding, SimpleKeybinding, ChordKeybinding, Keybinding, ResolvedKeybinding, ResolvedKeybindingPart, KeybindingModifier, ScanCodeBinding
#include(vs/base/common/keyCodes): KeyCodeUtils, ScanCode
#include(vs/platform/keyboardLayout/common/keyboardMapper): IKeyboardMapper
#includeAll(vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper):
#includeAll(vs/platform/configuration/common/configuration):
#include(vs/platform/configuration/common/configurationModels): ConfigurationModel, DefaultConfigurationModel
#include(vs/base/common/actions): IAction
#includeAll(vs/platform/progress/common/progress):

#include(vs/base/common/collections): IStringDictionary
#includeAll(vs/base/common/jsonSchema):
#include(vs/platform/registry/common/platform): Registry, IRegistry
#includeAll(vs/platform/contextkey/common/contextkey):
#includeAll(vs/platform/keybinding/common/keybinding):
#includeAll(vs/workbench/services/keybinding/common/keybindingIO):
#include(vs/base/common/platform): OperatingSystem, OS
#includeAll(vs/base/common/keybindingParser):
#include(vs/base/common/types): TypeConstraint
#includeAll(vs/platform/commands/common/commands;ICommand=>ICommandRegistryCommand):
#includeAll(vs/platform/keybinding/common/keybindingsRegistry;Extensions=>KeybindingExtensions):
#includeAll(vs/platform/jsonschemas/common/jsonContributionRegistry;Extensions=>JsonContributionExtensions):
#includeAll(vs/platform/keybinding/common/keybindingResolver):
#includeAll(vs/platform/keybinding/common/resolvedKeybindingItem): removeElementsAfterNulls
#include(vs/workbench/services/keybinding/browser/keybindingService): resolveUserKeybindingItems
#include(vs/platform/configuration/common/configurationRegistry;Extensions=>ConfigurationExtensions): Extensions, IConfigurationRegistry, IConfigurationPropertySchema, IConfigurationNode, EditPresentationTypes, IConfigurationDefaults, IConfigurationDefaultOverride, IRegisteredConfigurationPropertySchema, IExtensionInfo, ConfigurationScope, allSettings
#includeAll(vs/workbench/contrib/snippets/browser/snippetsFile): SnippetFile
#includeAll(vs/platform/extensions/common/extensions;ICommand=>IExtensionCommand):
#includeAll(vs/workbench/contrib/snippets/browser/snippets.contribution;LanguageId=>languages.LanguageId):
#includeAll(vs/workbench/contrib/snippets/browser/snippetCompletionProvider;ITextModel=>editor.ITextModel;CompletionItem=>languages.CompletionItem;CompletionItemLabel=>languages.CompletionItemLabel;CompletionItemKind=>languages.CompletionItemKind;CompletionItemInsertTextRule=>languages.CompletionItemInsertTextRule;CompletionItemProvider=>languages.CompletionItemProvider;ILanguageService=>languages.ILanguageService;CompletionContext=>languages.CompletionContext;CompletionList=>languages.CompletionList;ILanguageConfigurationService=>languages.ILanguageConfigurationService):
#include(vs/base/common/filters): FuzzyScore
#includeAll(vs/editor/contrib/suggest/browser/suggest;modes.=>;ICodeEditor=>editor.ICodeEditor;class CompletionItem=>class SuggestCompletionItem): provideSuggestionItems, getSuggestionComparator, showSimpleSuggestions, suggestWidgetStatusbarMenu, CompletionOptions, CompletionItemModel, Context, ISuggestItemPreselector
#includeAll(vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint;handleConfig=>handleLanguageConfiguration;CommentRule=>languages.CommentRule;CharacterPair=>languages.CharacterPair;IAutoClosingPairConditional=>languages.IAutoClosingPairConditional;IAutoClosingPair=>languages.IAutoClosingPair;FoldingRules=>languages.FoldingRules): LanguageConfigurationFileHandler
#includeAll(vs/workbench/services/themes/common/workbenchThemeService;IThemeService=>editor.IThemeService;IColorTheme=>editor.IColorTheme):
#includeAll(vs/workbench/services/extensionResourceLoader/common/extensionResourceLoader):
#includeAll(vs/platform/theme/common/tokenClassificationRegistry;Extensions=>TokenClassificationExtensions;Color=>editor.Color):
#include(vs/workbench/services/themes/common/colorThemeData;Color=>editor.Color;ColorIdentifier=>editor.ColorIdentifier;ColorScheme=>editor.ColorScheme;ITokenStyle=>editor.ITokenStyle): ColorThemeData, TokenStyleDefinition, TokenStyleDefinitions

type IRawTheme = import('vscode-textmate').IRawTheme;
type IOnigLib = import('vscode-textmate').IOnigLib;
#include(vs/workbench/services/textMate/browser/abstractTextMateService;ILanguageService=>languages.ILanguageService;IState=>languages.IState;ITokenizationSupport=>languages.ITokenizationSupport;LanguageId=>languages.LanguageId): parseTextMateGrammar, TMTokenizationSupportWithLineLimit
#includeAll(vs/workbench/services/textMate/common/TMTokenization;IState=>languages.IState;ITokenizationSupport=>languages.ITokenizationSupport;LanguageId=>languages.LanguageId):
#includeAll(vs/workbench/services/textMate/common/TMGrammarFactory;LanguageId=>languages.LanguageId):
#include(vs/workbench/services/textMate/common/TMGrammars): IEmbeddedLanguagesMap, TokenTypesContribution, ITMSyntaxExtensionPoint
#include(vs/workbench/services/textMate/common/TMScopeRegistry;StandardTokenType=>languages.StandardTokenType;LanguageId=>languages.LanguageId): IValidGrammarDefinition, IValidEmbeddedLanguagesMap, IValidTokenTypeMap

#include(vs/platform/keybinding/common/abstractKeybindingService;ITelemetryService=>any): AbstractKeybindingService
#include(vs/editor/standalone/browser/standaloneServices;IEditor=>editor.IEditor): StandaloneKeybindingService, StandaloneConfigurationService, StandaloneTextModelService

#includeAll(vs/editor/browser/services/abstractCodeEditorService;ICodeEditor=>editor.ICodeEditor;IDiffEditor=>editor.IDiffEditor;ITextModel=>editor.ITextModel;IDecorationRenderOptions=>editor.IDecorationRenderOptions;IModelDecorationOptions=>editor.IModelDecorationOptions;IThemeService=>editor.IThemeService):
#includeAll(vs/editor/browser/services/codeEditorService;ICodeEditor=>editor.ICodeEditor;IDiffEditor=>editor.IDiffEditor;ITextModel=>editor.ITextModel;IDecorationRenderOptions=>editor.IDecorationRenderOptions;IModelDecorationOptions=>editor.IModelDecorationOptions):
#includeAll(vs/editor/standalone/browser/standaloneCodeEditorService;ICodeEditor=>editor.ICodeEditor;IThemeService=>editor.IThemeService):

#include(vs/editor/contrib/folding/browser/folding;IEditorContribution=>editor.IEditorContribution;ICodeEditor=>editor.ICodeEditor): FoldingStateMemento, RangeProvider, FoldingController
#includeAll(vs/editor/contrib/folding/browser/foldingRanges):
#include(vs/editor/contrib/folding/browser/foldingModel;ITextModel=>editor.ITextModel;IModelDecorationOptionsIModelDecorationOptions;IModelDeltaDecoration=>editor.IModelDeltaDecoration;IModelDecorationOptions=>editor.IModelDecorationOptions): setCollapseStateForMatchingLines, FoldingModel, CollapseMemento, FoldingModelChangeEvent, IDecorationProvider

#include(vs/platform/editor/common/editor;IEditorModel=>IPlatformEditorModel;IEditorOptions=>editor.IEditorOptions): IEditorModel, IResourceEditorInput, ITextResourceEditorInput, IResourceEditorInput, IBaseUntypedEditorInput, IBaseResourceEditorInput, ITextEditorOptions, IBaseTextResourceEditorInput, ITextEditorSelection, TextEditorSelectionRevealType, TextEditorSelectionSource
#includeAll(vs/editor/common/services/resolverService;IEditorModel=>IPlatformEditorModel;ITextModel=>editor.ITextModel;ITextSnapshot=>editor.ITextSnapshot):
#includeAll(vs/editor/common/services/model;ITextModel=>editor.ITextModel;DocumentSemanticTokensProvider=>languages.DocumentSemanticTokensProvider;DocumentRangeSemanticTokensProvider=>languages.DocumentRangeSemanticTokensProvider;ITextModelCreationOptions=>editor.ITextModelCreationOptions):
#includeAll(vs/editor/common/services/modelService;DocumentSemanticTokensProvider=>languages.DocumentSemanticTokensProvider;DocumentRangeSemanticTokensProvider=>languages.DocumentRangeSemanticTokensProvider;ILanguageSelection=>languages.ILanguageSelection;ITextModel=>editor.ITextModel;ITextModelCreationOptions=>editor.ITextModelCreationOptions):
}

//dtsv=3